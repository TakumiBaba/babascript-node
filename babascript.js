// Generated by CoffeeScript 1.6.3
(function() {
  var Baba, Linda, WebsocketClient, crypto, mm, moment, sys,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mm = require("methodmissing");

  crypto = require("crypto");

  Linda = require("node-linda-client");

  WebsocketClient = require("websocket").client;

  moment = require("moment");

  sys = require("sys");

  Baba = (function() {
    function Baba(base, space) {
      this.humanExec = __bind(this.humanExec, this);
      this.__noSuchMethod = __bind(this.__noSuchMethod, this);
      var baba,
        _this = this;
      this.base = base || "linda.masuilab.org:10010";
      this.space = space || "takumibaba";
      this.linda = new Linda.LindaClient(this.base);
      this.ts = new Linda.TupleSpace("takumibaba", this.linda);
      this.client = new WebsocketClient();
      baba = mm(this, function(key, args) {
        return _this.__noSuchMethod(key, args);
      });
      return baba;
    }

    Baba.prototype.__noSuchMethod = function(key, args) {
      if (key === "inspect") {
        return sys.inspect(this);
      }
      return this.humanExec(key, args);
    };

    Baba.prototype.humanExec = function(key, args) {
      var _this = this;
      if (typeof args[args.length - 1] !== 'function') {
        throw Error("last args should callback function");
      }
      this.linda.io.once("connect", function() {
        var arg, callback, cid, tuple, _i, _len;
        cid = _this.callbackId();
        tuple = [
          "babascript", "eval", key, [], {
            "callback": cid
          }
        ];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          if (typeof arg === 'function') {
            callback = arg;
          } else {
            tuple[3].push(arg);
          }
        }
        _this.ts.write(tuple);
        return _this.ts.take(["babascript", "return", cid], function(result, info) {
          return callback(result);
        });
      });
      return this.linda.connect();
    };

    Baba.prototype.callbackId = function() {
      return crypto.createHash("md5").update("" + (moment().diff(this.linda.time)) + (moment().unix()) + "_" + (Math.random(1000000)), "utf-8").digest("hex");
    };

    return Baba;

  })();

  module.exports = Baba;

}).call(this);
