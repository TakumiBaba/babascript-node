// Generated by CoffeeScript 1.6.3
(function() {
  var Baba, Linda, crypto, mm, moment, sys,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mm = require("methodmissing");

  crypto = require("crypto");

  Linda = require("node-linda-client");

  moment = require("moment");

  sys = require("sys");

  Baba = (function() {
    Baba.prototype.resultList = {};

    function Baba(base, space) {
      this.exit = __bind(this.exit, this);
      this.humanExec = __bind(this.humanExec, this);
      this.__noSuchMethod = __bind(this.__noSuchMethod, this);
      var baba,
        _this = this;
      this.base = base || "http://linda.masuilab.org/";
      this.space = space || "takumibaba";
      this.linda = new Linda(this.base, this.space);
      baba = mm(this, function(key, args) {
        return _this.__noSuchMethod(key, args);
      });
      return baba;
    }

    Baba.prototype.__noSuchMethod = function(key, args) {
      if (key === "inspect") {
        return sys.inspect(this);
      }
      return this.humanExec(key, args);
    };

    Baba.prototype.humanExec = function(key, args) {
      var _this = this;
      if (typeof args[args.length - 1] !== 'function') {
        throw Error("last args should be callback function");
      }
      return this.linda.io.once("connect", function() {
        var arg, callback, cid, count, k, options, order, t, timeoutFlag, tuple, value, _i, _len;
        console.log("connect");
        cid = _this.callbackId();
        options = {};
        order = "eval";
        _this.resultList[cid] = [];
        count = 0;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          if (arg["timeout"]) {
            arg["timeout"] = moment().add("seconds", arg["timeout"]).format("YYYY-MM-DD HH:mm:ss");
          }
          if (arg["count"]) {
            count = arg["count"] - 1;
          }
          if (arg["broadcast"]) {
            order = "broadcast";
            count = arg["broadcast"] - 1;
          }
          if (typeof arg === 'function') {
            callback = arg;
          } else {
            for (k in arg) {
              value = arg[k];
              options[k] = value;
            }
          }
        }
        tuple = [
          "babascript", order, key, options, {
            "callback": cid
          }
        ];
        console.log(tuple);
        _this.linda.ts.write(tuple);
        timeoutFlag = false;
        if (tuple[3].timeout != null) {
          timeoutFlag = true;
          t = Math.ceil(-(moment().diff(tuple[3].timeout)) / 1000);
          setTimeout(function() {
            if (timeoutFlag) {
              _this.linda.ts.write(["babascript", "cancel", cid]);
              return _this.linda.ts.take(tuple, function() {
                return callback({
                  error: "timeout"
                });
              });
            }
          }, t * 1000);
        }
        return _this.linda.ts.take(["babascript", "return", cid], function(_tuple, info, list) {
          timeoutFlag = false;
          if (count > 0) {
            count--;
            console.log("count: " + count);
            _this.resultList[cid].push(_tuple);
            return _this.linda.ts.take(["babascript", "return", cid], arguments.callee);
          } else {
            console.log("callback!");
            _this.resultList[cid].push(_tuple);
            _this.linda.ts.write(["babascript", "cancel", cid]);
            return callback(_this.resultList[cid], info);
          }
        });
      });
    };

    Baba.prototype.callbackId = function() {
      return crypto.createHash("md5").update("" + (moment().diff(this.linda.time)) + (moment().unix()) + "_" + (Math.random(1000000)), "utf-8").digest("hex");
    };

    Baba.prototype.exit = function() {
      return this.linda.io.close();
    };

    return Baba;

  })();

  module.exports = Baba;

}).call(this);
